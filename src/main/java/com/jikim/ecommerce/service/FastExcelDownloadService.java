package com.jikim.ecommerce.service;

import com.jikim.ecommerce.dto.DownloadProgress;
import com.jikim.ecommerce.dto.DownloadRequest;
import com.jikim.ecommerce.websocket.ProgressWebSocketHandler;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.dhatim.fastexcel.Workbook;
import org.dhatim.fastexcel.Worksheet;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

@Service
@RequiredArgsConstructor
@Slf4j
public class FastExcelDownloadService {
    
    private final JdbcTemplate jdbcTemplate;
    private final ProgressWebSocketHandler progressWebSocketHandler;
    
    private static final String DOWNLOAD_DIR = "downloads/";
    
    /**
     * FastExcelÎ°ú ÎåÄÏö©Îüâ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ (Îã®Ïùº ÏøºÎ¶¨ Î∞©Ïãù)
     */
    public void processWithFastExcel(DownloadRequest request) {
        log.info("üöÄ FastExcel processing started: {}", request.getRequestId());
        
        String filePath = DOWNLOAD_DIR + request.getFileName();
        File downloadDir = new File(DOWNLOAD_DIR);
        if (!downloadDir.exists()) {
            downloadDir.mkdirs();
        }
        
        try (OutputStream os = new FileOutputStream(filePath);
             Workbook workbook = new Workbook(os, "Excel Export", "1.0")) {
            
            Worksheet worksheet = workbook.newWorksheet("Data");
            
            // Ìó§Îçî ÏÑ§Ï†ï
            worksheet.value(0, 0, "ID");
            worksheet.value(0, 1, "Ïù¥Î¶Ñ");
            worksheet.value(0, 2, "ÏÑ§Î™Ö");
            worksheet.value(0, 3, "Í∞ÄÍ≤©");
            worksheet.value(0, 4, "Ïπ¥ÌÖåÍ≥†Î¶¨");
            worksheet.value(0, 5, "ÏÉùÏÑ±ÏùºÏãú");
            
            // ÏàòÏ†ï: AtomicInteger ÏÇ¨Ïö© (Excel Ìñâ Ïù∏Îç±Ïä§Ïö©)
            AtomicInteger currentRow = new AtomicInteger(1); // Ìó§Îçî Îã§ÏùåÎ∂ÄÌÑ∞
            AtomicLong processedCount = new AtomicLong(0);
            
            String sql = "SELECT id, name, description, price, category, created_at FROM sample_data ORDER BY id";
            
            jdbcTemplate.query(sql, rs -> {
                int rowIndex = currentRow.getAndIncrement();
                
                try {
                    // FastExcel Îç∞Ïù¥ÌÑ∞ ÏûÖÎ†•
                    worksheet.value(rowIndex, 0, rs.getLong("id"));
                    worksheet.value(rowIndex, 1, rs.getString("name"));
                    worksheet.value(rowIndex, 2, rs.getString("description"));
                    worksheet.value(rowIndex, 3, rs.getBigDecimal("price").doubleValue());
                    worksheet.value(rowIndex, 4, rs.getString("category"));
                    worksheet.value(rowIndex, 5, rs.getTimestamp("created_at").toLocalDateTime()
                            .format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
                    
                    long processed = processedCount.incrementAndGet();
                    
                    // ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏ (10,000Í±¥ÎßàÎã§)
                    if (processed % 10000 == 0) {
                        DownloadProgress progress = DownloadProgress.processing(
                                request.getRequestId(), -1, processed);
                        progressWebSocketHandler.sendProgress(request.getSessionId(), progress);
                        log.debug("FastExcel processed: {} rows", processed);
                    }
                } catch (Exception e) {
                    log.error("Error writing row {}: {}", rowIndex, e.getMessage());
                    throw new RuntimeException("Excel Ìñâ ÏûëÏÑ± Ïã§Ìå®: " + e.getMessage(), e);
                }
            });
            
            // FastExcel ÌååÏùº ÏôÑÏÑ±
            workbook.finish();
            
            // ÏôÑÎ£å ÏïåÎ¶º
            String downloadUrl = "/api/download/file/" + request.getFileName();
            DownloadProgress completedProgress = DownloadProgress.completed(request.getRequestId(), downloadUrl);
            progressWebSocketHandler.sendProgress(request.getSessionId(), completedProgress);
            
            log.info("‚úÖ FastExcel completed: {} ({} rows)", filePath, processedCount.get());
            
        } catch (Exception e) {
            log.error("‚ùå FastExcel processing failed: {}", request.getRequestId(), e);
            DownloadProgress failedProgress = DownloadProgress.failed(request.getRequestId(), e.getMessage());
            progressWebSocketHandler.sendProgress(request.getSessionId(), failedProgress);
            throw new RuntimeException("FastExcel Ï≤òÎ¶¨ Ïã§Ìå®: " + e.getMessage(), e);
        }
    }
    
    /**
     * üî• FastExcel + Ï≤≠ÌÅ¨ Ï≤òÎ¶¨ (DB Î∂ÄÌïò ÏµúÏÜåÌôî)
     */
    public void processWithFastExcelChunked(DownloadRequest request) {
        log.info("üöÄ FastExcel Chunked processing: {}", request.getRequestId());
        
        String filePath = DOWNLOAD_DIR + request.getFileName();
        File downloadDir = new File(DOWNLOAD_DIR);
        if (!downloadDir.exists()) {
            downloadDir.mkdirs();
        }
        
        try (OutputStream os = new FileOutputStream(filePath);
             Workbook workbook = new Workbook(os, "Excel Export", "1.0")) {
            
            Worksheet worksheet = workbook.newWorksheet("Data");
            
            // Ìó§Îçî ÏÑ§Ï†ï
            worksheet.value(0, 0, "ID");
            worksheet.value(0, 1, "Ïù¥Î¶Ñ"); 
            worksheet.value(0, 2, "ÏÑ§Î™Ö");
            worksheet.value(0, 3, "Í∞ÄÍ≤©");
            worksheet.value(0, 4, "Ïπ¥ÌÖåÍ≥†Î¶¨");
            worksheet.value(0, 5, "ÏÉùÏÑ±ÏùºÏãú");
            
            // Ï†ÑÏ≤¥ Í±¥Ïàò Ï°∞Ìöå
            Long totalCount = jdbcTemplate.queryForObject("SELECT COUNT(*) FROM sample_data", Long.class);
            if (totalCount == null) totalCount = 0L;
            
            final int CHUNK_SIZE = 10000; // 1ÎßåÍ±¥Ïî© Ï≤≠ÌÅ¨ Ï≤òÎ¶¨
            AtomicInteger currentExcelRow = new AtomicInteger(1); // ‚úÖ ÏàòÏ†ï: AtomicInteger ÏÇ¨Ïö©
            long processedCount = 0;
            
            // Ï≤≠ÌÅ¨Î≥Ñ Ï≤òÎ¶¨
            for (int offset = 0; offset < totalCount; offset += CHUNK_SIZE) {
                String chunkSql = "SELECT id, name, description, price, category, created_at " +
                                 "FROM sample_data ORDER BY id LIMIT ? OFFSET ?";
                
                // ‚úÖ ÏàòÏ†ï: Í∞Å Ï≤≠ÌÅ¨ÎßàÎã§ Ìñâ Î≤àÌò∏ Ï∂îÏ†Å
                jdbcTemplate.query(chunkSql, new Object[]{CHUNK_SIZE, offset}, rs -> {
                    try {
                        int rowIndex = currentExcelRow.getAndIncrement();
                        
                        worksheet.value(rowIndex, 0, rs.getLong("id"));
                        worksheet.value(rowIndex, 1, rs.getString("name"));
                        worksheet.value(rowIndex, 2, rs.getString("description"));
                        worksheet.value(rowIndex, 3, rs.getBigDecimal("price").doubleValue());
                        worksheet.value(rowIndex, 4, rs.getString("category"));
                        worksheet.value(rowIndex, 5, rs.getTimestamp("created_at").toLocalDateTime()
                                .format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
                                
                    } catch (Exception e) {
                        log.error("Error writing chunk row: {}", e.getMessage());
                        throw new RuntimeException("Ï≤≠ÌÅ¨ Ìñâ ÏûëÏÑ± Ïã§Ìå®: " + e.getMessage(), e);
                    }
                });
                
                processedCount += Math.min(CHUNK_SIZE, totalCount - offset);
                
                // ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏ (Ï≤≠ÌÅ¨ÎßàÎã§)
                DownloadProgress progress = DownloadProgress.processing(
                        request.getRequestId(), totalCount, processedCount);
                progressWebSocketHandler.sendProgress(request.getSessionId(), progress);
                
                log.debug("FastExcel chunk processed: {}/{}", processedCount, totalCount);
            }
            
            workbook.finish();
            
            // ÏôÑÎ£å ÏïåÎ¶º
            String downloadUrl = "/api/download/file/" + request.getFileName();
            DownloadProgress completedProgress = DownloadProgress.completed(request.getRequestId(), downloadUrl);
            progressWebSocketHandler.sendProgress(request.getSessionId(), completedProgress);
            
            log.info("‚úÖ FastExcel chunked completed: {} ({} rows)", filePath, processedCount);
            
        } catch (Exception e) {
            log.error("‚ùå FastExcel chunked failed: {}", request.getRequestId(), e);
            DownloadProgress failedProgress = DownloadProgress.failed(request.getRequestId(), e.getMessage());
            progressWebSocketHandler.sendProgress(request.getSessionId(), failedProgress);
            throw new RuntimeException("FastExcel Ï≤≠ÌÅ¨ Ï≤òÎ¶¨ Ïã§Ìå®: " + e.getMessage(), e);
        }
    }
}
